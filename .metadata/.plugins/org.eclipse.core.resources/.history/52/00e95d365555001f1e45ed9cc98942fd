package com.example.library;

import static org.assertj.core.api.Assertions.assertThat;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.example.library.entities.Book;
import com.example.library.exceptions.BusinessLogicViolationException;
import com.example.library.models.BookResModel;
import com.example.library.repositorey.BookRepositorey;
import com.example.library.service.BookServiceImpl;


@ExtendWith(MockitoExtension.class)
class LibraryMangementSystemApplicationTests {

	@InjectMocks
	private BookServiceImpl bookService;
	
	@Mock
	private BookRepositorey bookRepositorey;
	
	
	@Test
    void getAllBooksTest() {
        int pageNo = 0;
        int pageSize = 10;
        Pageable pageable = PageRequest.of(pageNo, pageSize);

        // Sample data
        Book book1 = new Book();
        book1.setId(1);
        book1.setTitle("Book One");
        book1.setAuthor("Author One");

        Book book2 = new Book();
        book2.setId(2);
        book2.setTitle("Book Two");
        book2.setAuthor("Author Two");

        List<Book> books = Arrays.asList(book1, book2);
        Page<Book> page = new PageImpl<>(books, pageable, books.size());

        // Arrange
        when(bookRepositorey.findAll(pageable)).thenReturn(page);

        // Act
        List<BookResModel> result = bookService.getAllBooks(pageNo, pageSize);

        // Assert
        assertThat(result).hasSize(books.size());
        assertThat(result.get(0).getTitle()).isEqualTo(book1.getTitle());
        assertThat(result.get(1).getTitle()).isEqualTo(book2.getTitle());
    }
	
	@Test
	void getBookByIdNotFoundTest() {
		
		int bookId = 1;
		when(bookRepositorey.findById(bookId)).thenReturn(Optional.empty());
		assertThrows(BusinessLogicViolationException.class, () -> {
            bookService.getBookById(bookId);
        });

	}

}
