package com.example.library.service;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import com.example.library.entities.Book;
import com.example.library.exceptions.BusinessLogicViolationException;
import com.example.library.helper.Helper;
import com.example.library.models.BookReqModel;
import com.example.library.models.BookResModel;
import com.example.library.repositorey.BookRepositorey;


@Service
public class BookServiceImpl implements BookService {

	@Autowired
	private BookRepositorey bookRepositorey;
	
	@Override
	public List<BookResModel> getAllBooks() {
	
		//List<BookResModel>bookResModels = new ArrayList<>();
		List<Book> allBooks = bookRepositorey.findAllBooks();
		return allBooks.stream().map( b -> Helper.mapToBookResModel(b)).collect(Collectors.toList());
		/*allBooks.forEach(book ->{
			
			bookResModels.add(Helper.mapToBookResModel(book));
		});*/
		
		//return bookResModels;
	}
	
	

	@Override
	@Transactional
	public Integer createBook(BookReqModel bookReqModel) {
		
		return bookRepositorey.save(Helper.mapToBookReqModel(bookReqModel)).getId();

	}
	
	

	@Override
	public BookResModel getBookById(Integer id) {
		
		Book book = bookRepositorey.findById(id).orElseThrow(()->  new BusinessLogicViolationException("BOOK NOT FOUND"));
		return Helper.mapToBookResModel(book);	
	}
	
	

	@Override
	@Transactional
	public BookResModel updateBook(Integer id, BookReqModel bookReqModel) {
		
		Book book = bookRepositorey.findById(id).orElseThrow(()->  new BusinessLogicViolationException("BOOK NOT FOUND"));
		Helper.setDataToBook(book,bookReqModel);
		bookRepositorey.save(book);
		return Helper.mapToBookResModel(book);

	}

	@Override
	public void deleteBook(Integer id) {
	
		bookRepositorey.delete(bookRepositorey.findById(id).orElseThrow(()-> new BusinessLogicViolationException("BOOK NOT FOUND")));
	}
	
	

}
