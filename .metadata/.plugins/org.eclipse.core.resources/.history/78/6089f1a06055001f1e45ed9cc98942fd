package com.example.library.test.record;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.Optional;

import static org.mockito.Mockito.verify;
import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.example.library.entities.Book;
import com.example.library.entities.BorrowingRecords;
import com.example.library.entities.Patron;
import com.example.library.models.BorrowReqModel;
import com.example.library.repository.BookRepository;
import com.example.library.repository.BorrowingRecordRepository;
import com.example.library.repository.PatronRepository;
import com.example.library.service.BookServiceImpl;
import com.example.library.service.BorrowingRecordServiceImpl;
import com.example.library.service.PatronServiceImpl;

@ExtendWith(MockitoExtension.class)
public class BorrowingRecordTest {

	@InjectMocks
    private BookServiceImpl bookService;

    @Mock
    private BookRepository bookRepository;

    @InjectMocks
    private PatronServiceImpl patronService;
    
    @Mock
    private PatronRepository patronRepository;
    
	@InjectMocks
	private BorrowingRecordServiceImpl BorrowingRecordService;

	@Mock
	private BorrowingRecordRepository borrowingRecordRepository;
	
	
	@Test
    void createBookBorrowingRecordTest() {
        
		Integer bookId = 1;
        Integer patronId = 2;

        Book book = new Book();
        book.setId(bookId);

        Patron patron = new Patron();
        patron.setId(patronId);

        BorrowReqModel borrowReqModel = new BorrowReqModel();
        // Set the attributes for borrowReqModel if needed

        BorrowingRecords borrowingRecord = new BorrowingRecords();
        borrowingRecord.setId(3);  // Example ID

        // Mock the repository methods
        when(bookRepository.findById(bookId)).thenReturn(Optional.of(book));
        when(patronRepository.findById(patronId)).thenReturn(Optional.of(patron));
        when(borrowingRecordRepository.save(any(BorrowingRecords.class))).thenReturn(borrowingRecord);

        // Call the service method
        Integer resultId = BorrowingRecordService.createBookBorrowigRecord(bookId, patronId, borrowReqModel);

        // Verify interactions
        verify(bookRepository).findById(bookId);
        verify(patronRepository).findById(patronId);
        verify(borrowingRecordRepository).save(any(BorrowingRecords.class));

        // Assert the result
        assertThat(resultId).isEqualTo(borrowingRecord.getId());
    }
}
