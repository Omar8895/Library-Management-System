package com.example.library.booktest;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.any;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.example.library.entities.Book;
import com.example.library.entities.Patron;
import com.example.library.exceptions.BusinessLogicViolationException;
import com.example.library.models.BookReqModel;
import com.example.library.models.PatronsReqModel;
import com.example.library.models.PatronsResModel;
import com.example.library.repositorey.PatronRepositorey;
import com.example.library.service.PatronServiceImpl;

@ExtendWith(MockitoExtension.class)
public class PatronTest {

	@InjectMocks
	private PatronServiceImpl patronService;

	@Mock
	private PatronRepositorey patronRepositorey;

	@Test
	void getAllPatronsTest() {
		int pageNo = 0;
		int pageSize = 5;
		Pageable pageable = PageRequest.of(pageNo, pageSize);

		Patron patron1 = new Patron();
		patron1.setId(1);
		patron1.setName("patron1");
		patron1.setEmail("patron1@gmail.com");
		patron1.setMobile("01111111111");

		Patron patron2 = new Patron();
		patron2.setId(1);
		patron2.setName("patron2");
		patron2.setEmail("patron2@gmail.com");
		patron2.setMobile("01111111112");

		List<Patron> patrons = Arrays.asList(patron1, patron2);
		Page<Patron> page = new PageImpl<>(patrons, pageable, patrons.size());

		when(patronRepositorey.findAll(pageable)).thenReturn(page);

		List<PatronsResModel> result = patronService.getAllPatrons(pageNo, pageSize);

		assertThat(result).hasSize(patrons.size());
		assertThat(result.get(0).getName()).isEqualTo(patron1.getName());
		assertThat(result.get(1).getName()).isEqualTo(patron2.getName());
	}

	@Test

	void createPatronTest() {

		PatronsReqModel patronReqModel = new PatronsReqModel();
		patronReqModel.setName("New Patron");
		patronReqModel.setEmail("patron@example.com");
		patronReqModel.setMobile("1234567890");

		Patron patron = new Patron();
		patron.setName(patronReqModel.getName());
		patron.setEmail(patronReqModel.getEmail());
		patron.setMobile(patronReqModel.getMobile());

		when(patronRepositorey.save(patron)).thenReturn(patron);

		Integer savedPatronId = patronService.createPatron(patronReqModel);

		verify(patronRepositorey).save(patron);

		assertThat(savedPatronId).isEqualTo(patron.getId());
	}

	@Test
	void getPatronByIdTest() {

		int patronId = 1;

		when(patronRepositorey.findById(patronId)).thenReturn(Optional.empty());

		assertThrows(BusinessLogicViolationException.class, () -> {
			patronService.getPatronById(patronId);
		});
	}

}
