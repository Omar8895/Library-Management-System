package com.example.library.exceptions;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.regex.Pattern;
import java.util.regex.Matcher;


import javax.validation.ConstraintViolationException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.CannotCreateTransactionException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class SystemExceptionHandler {
	private static final Logger logger = LoggerFactory.getLogger(SystemExceptionHandler.class);
	
	@ExceptionHandler({ BusinessLogicViolationException.class })
	public ResponseEntity<Object> handleBussinessLogicException(BusinessLogicViolationException ex) {
		ApiBusinessError apiBusinessError = new ApiBusinessError(UUID.randomUUID().toString(), LocalDateTime.now(),
				"BUSINESS_CONSTRAINT_VIOLATION", ex.getMessage(), ex.getDetails());
		logger.info("xxxxxxxxx   Exception : : : " + ex.getMessage());
		return new ResponseEntity<>(apiBusinessError, new HttpHeaders(), HttpStatus.UNPROCESSABLE_ENTITY);
	}
	
	
	@ExceptionHandler({ CannotCreateTransactionException.class })
	public ResponseEntity<Object> createTransactionExceptionHandler(CannotCreateTransactionException ex) {
		ApiError apiError = new ApiError(UUID.randomUUID().toString(), LocalDateTime.now(),
				"INTERNAL_SERVER_ERROR", "DATABASE_CONNECTON_ERROR");
		logger.info("xxxxxxxxx   Exception : : : " + ex.getMessage());
		return new ResponseEntity<>(apiError, new HttpHeaders(), HttpStatus.INTERNAL_SERVER_ERROR);

	}
	
	
	@ExceptionHandler({ RuntimeException.class })
	public ResponseEntity<Object> runTimeExceptionHandler(RuntimeException ex) {
		ex.printStackTrace();
		ApiError apiError = new ApiError(UUID.randomUUID().toString(), LocalDateTime.now(),
				"INTERNAL_SERVER_ERROR","RUN_TIME_EXCEPTION");
		logger.info("xxxxxxxxx   Exception : : : " + ex.getMessage());
		return new ResponseEntity<>(apiError, new HttpHeaders(), HttpStatus.INTERNAL_SERVER_ERROR);

	}
	
	
	@ExceptionHandler({ NullPointerException.class })
	public ResponseEntity<Object> exceptionHandler(NullPointerException ex) {
		ex.printStackTrace();
		ApiError apiError = new ApiError(UUID.randomUUID().toString(), LocalDateTime.now(),
				"INTERNAL_SERVER_ERROR", "NULL_POINTER_EXCEPTION");
		logger.info("xxxxxxxxx   Exception : : : " + ex.getMessage());
		return new ResponseEntity<>(apiError, new HttpHeaders(), HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@ExceptionHandler({ ConstraintViolationException.class })
	public ResponseEntity<Object> handleJavaxValidationException(ConstraintViolationException ex) {

		List<Error> errors = new ArrayList<Error>();

		List<String> errorList = Arrays.asList(ex.getMessage().split("\\s*,\\s*"));

		for (String error : errorList) {
			String capitalizedMessage = capitalizeMessage(getValidationMessage(error));
			errors.add(getValidationErrorMessage(capitalizedMessage, getValidationField(error)));
		}

		ApiBadRequestError apiBadRequestError = new ApiBadRequestError(UUID.randomUUID().toString(),
				LocalDateTime.now(), ApiErrorCodeEnum.BAD_REQUEST.name(), errors);
		logger.info("xxxxxxxxx   Exception : : : " + ex.getMessage());
		return new ResponseEntity<>(apiBadRequestError, new HttpHeaders(), HttpStatus.BAD_REQUEST);

	}
	
	
	private String getValidationField(String error) {
		Pattern pattern = Pattern.compile("\\.(.*):\\s");
		Matcher matcher = pattern.matcher(error);
		if (matcher.find())
			return matcher.group(1);
		return "";
	}

	private String getValidationMessage(String error) {
		Pattern pattern = Pattern.compile(":\\s(.*)");
		Matcher matcher = pattern.matcher(error);
		if (matcher.find())
			return matcher.group(1);
		return "";
	}


}
